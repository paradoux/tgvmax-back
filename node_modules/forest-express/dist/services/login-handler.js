'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = require('../services/logger.js');
var jwt = require('jsonwebtoken');
var UserSecretCreator = require('./user-secret-creator');
var AuthorizationFinder = require('./authorization-finder');
var otplib = require('otplib');
var TwoFactorRegistrationConfirmer = require('../services/two-factor-registration-confirmer');

function LoginHandler(_ref) {
  var _this = this;

  var renderingId = _ref.renderingId,
      envSecret = _ref.envSecret,
      authData = _ref.authData,
      useGoogleAuthentication = _ref.useGoogleAuthentication,
      authSecret = _ref.authSecret,
      twoFactorRegistration = _ref.twoFactorRegistration,
      projectId = _ref.projectId,
      twoFactorToken = _ref.twoFactorToken;
  var forestToken = authData.forestToken,
      email = authData.email,
      password = authData.password;


  function isTwoFactorTokenValid(user, twoFactorToken) {
    var twoFactorAuthenticationSecret = user.two_factor_authentication_secret;
    var userSecret = new UserSecretCreator(twoFactorAuthenticationSecret, process.env.FOREST_2FA_SECRET_SALT).perform();

    return otplib.authenticator.verify({ token: twoFactorToken, secret: userSecret });
  }

  function getTwoFactorResponse(user) {
    var TWO_FACTOR_SECRET_SALT = process.env.FOREST_2FA_SECRET_SALT;

    if (TWO_FACTOR_SECRET_SALT === undefined) {
      logger.error('Cannot use the two factor authentication because the environment variable "FOREST_2FA_SECRET_SALT" is not set.\nYou can generate it using this command: `$ openssl rand -hex 10`');
      throw new Error('Invalid 2FA configuration, please ask more information to your admin');
    }

    if (TWO_FACTOR_SECRET_SALT.length !== 20) {
      logger.error('The FOREST_2FA_SECRET_SALT environment variable must be 20 characters long.\nYou can generate it using this command: `$ openssl rand -hex 10`');
      throw new Error('Invalid 2FA configuration, please ask more information to your admin');
    }

    if (user.two_factor_authentication_active) {
      return { twoFactorAuthenticationEnabled: true };
    } else {
      var twoFactorAuthenticationSecret = user.two_factor_authentication_secret;
      var userSecret = new UserSecretCreator(twoFactorAuthenticationSecret, TWO_FACTOR_SECRET_SALT).perform();

      return {
        twoFactorAuthenticationEnabled: true,
        userSecret: userSecret
      };
    }
  }

  function createToken(user, renderingId) {
    return jwt.sign({
      id: user.id,
      type: 'users',
      data: {
        email: user.email,
        first_name: user.first_name,
        last_name: user.last_name,
        teams: user.teams
      },
      relationships: {
        renderings: {
          data: [{
            type: 'renderings',
            id: renderingId
          }]
        }
      }
    }, authSecret, {
      expiresIn: '14 days'
    });
  }

  this.perform = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    var user;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            user = void 0;

            if (!useGoogleAuthentication) {
              _context.next = 7;
              break;
            }

            _context.next = 4;
            return new AuthorizationFinder(renderingId, envSecret, twoFactorRegistration, null, null, forestToken).perform();

          case 4:
            user = _context.sent;
            _context.next = 10;
            break;

          case 7:
            _context.next = 9;
            return new AuthorizationFinder(renderingId, envSecret, twoFactorRegistration, email, password).perform();

          case 9:
            user = _context.sent;

          case 10:
            if (user) {
              _context.next = 12;
              break;
            }

            throw new Error();

          case 12:
            if (!user.two_factor_authentication_enabled) {
              _context.next = 22;
              break;
            }

            if (!twoFactorToken) {
              _context.next = 21;
              break;
            }

            if (!isTwoFactorTokenValid(user, twoFactorToken)) {
              _context.next = 18;
              break;
            }

            _context.next = 17;
            return new TwoFactorRegistrationConfirmer({
              projectId: projectId,
              envSecret: envSecret,
              useGoogleAuthentication: useGoogleAuthentication,
              email: email,
              forestToken: forestToken
            }).perform();

          case 17:
            return _context.abrupt('return', { token: createToken(user, renderingId) });

          case 18:
            throw new Error('Your token is invalid, please try again.');

          case 21:
            return _context.abrupt('return', getTwoFactorResponse(user));

          case 22:
            return _context.abrupt('return', { token: createToken(user, renderingId) });

          case 23:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, _this);
  }));
}

module.exports = LoginHandler;