'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var path = require('../services/path');
var ipWhitelist = require('../services/ip-whitelist');
var errorMessages = require('../utils/error-messages');
var LoginHandler = require('../services/login-handler');

module.exports = function (app, opts) {
  var processLogin = function () {
    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(_ref) {
      var useGoogleAuthentication = _ref.useGoogleAuthentication,
          renderingId = _ref.renderingId,
          authData = _ref.authData,
          response = _ref.response,
          twoFactorRegistration = _ref.twoFactorRegistration,
          projectId = _ref.projectId,
          twoFactorToken = _ref.twoFactorToken;
      var responseData;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;

              if (!(twoFactorRegistration && !twoFactorToken)) {
                _context.next = 3;
                break;
              }

              throw new Error();

            case 3:
              _context.next = 5;
              return ipWhitelist.retrieve(envSecret);

            case 5:
              _context.next = 7;
              return new LoginHandler({
                renderingId: renderingId,
                envSecret: envSecret,
                authData: authData,
                useGoogleAuthentication: useGoogleAuthentication,
                authSecret: authSecret,
                twoFactorRegistration: twoFactorRegistration,
                projectId: projectId,
                twoFactorToken: twoFactorToken
              }).perform();

            case 7:
              responseData = _context.sent;


              response.send(responseData);
              _context.next = 14;
              break;

            case 11:
              _context.prev = 11;
              _context.t0 = _context['catch'](0);

              formatAndSendError(response, _context.t0);

            case 14:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 11]]);
    }));

    return function processLogin(_x) {
      return _ref2.apply(this, arguments);
    };
  }();

  var authSecret = opts.authSecret,
      envSecret = opts.envSecret;


  function checkAuthSecret(request, response, next) {
    if (!authSecret) {
      return response.status(401).send({ errors: [{ detail: errorMessages.CONFIGURATION.AUTH_SECRET_MISSING }] });
    }
    next();
  }

  function formatAndSendError(response, error) {
    var body = void 0;
    if (error && error.message) {
      body = { errors: [{ detail: error.message }] };
    }
    return response.status(401).send(body);
  }

  function loginWithPassword(request, response) {
    var _request$body = request.body,
        email = _request$body.email,
        password = _request$body.password,
        renderingId = _request$body.renderingId,
        projectId = _request$body.projectId,
        twoFactorToken = _request$body.token;

    var twoFactorRegistration = !!request.body.twoFactorRegistration;

    processLogin({
      useGoogleAuthentication: false,
      renderingId: renderingId,
      authData: { email: email, password: password },
      response: response,
      twoFactorRegistration: twoFactorRegistration,
      projectId: projectId,
      twoFactorToken: twoFactorToken
    });
  }

  function loginWithGoogle(request, response) {
    var _request$body2 = request.body,
        forestToken = _request$body2.forestToken,
        renderingId = _request$body2.renderingId,
        projectId = _request$body2.projectId,
        twoFactorToken = _request$body2.token;

    var twoFactorRegistration = !!request.body.twoFactorRegistration;

    processLogin({
      useGoogleAuthentication: true,
      renderingId: renderingId,
      authData: { forestToken: forestToken },
      response: response,
      twoFactorRegistration: twoFactorRegistration,
      projectId: projectId,
      twoFactorToken: twoFactorToken
    });
  }

  this.perform = function () {
    app.post(path.generate('sessions', opts), checkAuthSecret, loginWithPassword);
    app.post(path.generate('sessions-google', opts), checkAuthSecret, loginWithGoogle);
  };
};